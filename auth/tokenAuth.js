// Generated by CoffeeScript 1.11.1
var bcrypt, jwt, routes, utils;

bcrypt = require('bcrypt');

jwt = require('jsonwebtoken');

routes = function(route, model, router) {
  router.get(route, function(req, res, next) {
    return res.send("this is the auth endpoint");
  });
  router.post(route, function(req, res, next) {
    var password, username;
    username = req.body['username'];
    password = req.body['password'];
    return model.findOne({
      username: username
    }, function(err, model) {
      var hash;
      if (err) {
        res.status(401).end();
      }
      hash = model.password;
      return bcrypt.compare(req.body['password'], hash, function(err, match) {
        var existingTokens, token;
        if (err) {
          return res.status(401).end();
        }
        if (match) {
          token = jwt.sign({
            userName: model.username,
            id: model._id,
            admin: model.is_superuser,
            salt: Math.random()
          }, 'shhhhh');
          existingTokens = JSON.parse(model.token);
          existingTokens.token.push(token);
          console.log(existingTokens);
          model.token = JSON.stringify(existingTokens);
          model.save();
          return res.status(200).json({
            key: token
          });
        } else {
          return res.status(401).end();
        }
      });
    });
  });
  router.post(route + "/logout", function(req, res, next) {
    var token;
    token = req.body["token"];
    return jwt.verify(token, 'shhhhh', function(err, decoded) {
      var userId;
      if (err) {
        return res.status(401).end();
      }
      userId = decoded.id;
      return model.findOne({
        _id: userId
      }, function(err, object) {
        var existingTokens, index;
        if (err) {
          return res.status(401).end();
        }
        existingTokens = JSON.parse(object.token);
        index = existingTokens.token.indexOf(token);
        existingTokens.token.splice(index, 1);
        object.token = JSON.stringify(existingTokens);
        object.save();
        return res.status(200).end();
      });
    });
  });
  return router.post(route + "/signup", function(req, res, next) {
    req.body['is_superuser'] = false;
    req.body['token'] = '{"token":[]}';
    return bcrypt.hash(req.body['password'], 5, function(err, password) {
      if (err) {
        return res.status(401).end();
      }
      req.body.password = password;
      return new model(req.body).save(function(err) {
        if (err) {
          return res.status(401).json(err);
        }
        return res.send("route to create new user");
      });
    });
  });
};

utils = function() {
  var is_authenticated, is_superuser;
  is_authenticated = function(token) {
    return console.log("Test if the user is authenticated");
  };
  return is_superuser = function(token) {
    return console.log("test if is_superuser");
  };
};

module.exports["utils"] = utils;

module.exports["routes"] = routes;
